// Package api provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Modify customer.
	// (PATCH /customer/modify/{id})
	ModifyCustomer(ctx echo.Context, id Id) error
	// Check if email exists in database.
	// (GET /customer/validate/email/{email})
	ValidateEmail(ctx echo.Context, email Email) error
	// Check if phone number exists in database.
	// (GET /customer/validate/phone-number/{phone})
	ValidatePhoneNumber(ctx echo.Context, phone Phone) error
	// Retrieve invoices.
	// (GET /invoice)
	RetrieveInvoices(ctx echo.Context) error
	// Create invoice.
	// (POST /invoice)
	CreateInvoice(ctx echo.Context) error
	// Retrieve invoice.
	// (GET /invoice/{id})
	RetrieveInvoice(ctx echo.Context, id Id) error
	// Retrieve orders.
	// (GET /order)
	RetrieveOrders(ctx echo.Context) error
	// Create order.
	// (POST /order)
	CreateOrder(ctx echo.Context) error
	// Retrieve order.
	// (GET /order/{id})
	RetrieveOrder(ctx echo.Context, id Id) error
	// Retrieve all available products.
	// (GET /product)
	RetrieveProducts(ctx echo.Context) error
	// Retrieve product details for specified product group.
	// (GET /product/filter/product-group/{group})
	RetrieveProductsByProductGroup(ctx echo.Context, group Group) error
	// Retrieve product details.
	// (GET /product/{id})
	RetrieveProduct(ctx echo.Context, id Id) error
	// Login customer.
	// (POST /sign-in)
	CustomerLogin(ctx echo.Context) error
	// Customer registration.
	// (POST /sign-up)
	CustomerRegistration(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ModifyCustomer converts echo context to params.
func (w *ServerInterfaceWrapper) ModifyCustomer(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id Id

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ModifyCustomer(ctx, id)
	return err
}

// ValidateEmail converts echo context to params.
func (w *ServerInterfaceWrapper) ValidateEmail(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "email" -------------
	var email Email

	err = runtime.BindStyledParameter("simple", false, "email", ctx.Param("email"), &email)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter email: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ValidateEmail(ctx, email)
	return err
}

// ValidatePhoneNumber converts echo context to params.
func (w *ServerInterfaceWrapper) ValidatePhoneNumber(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "phone" -------------
	var phone Phone

	err = runtime.BindStyledParameter("simple", false, "phone", ctx.Param("phone"), &phone)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter phone: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ValidatePhoneNumber(ctx, phone)
	return err
}

// RetrieveInvoices converts echo context to params.
func (w *ServerInterfaceWrapper) RetrieveInvoices(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RetrieveInvoices(ctx)
	return err
}

// CreateInvoice converts echo context to params.
func (w *ServerInterfaceWrapper) CreateInvoice(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateInvoice(ctx)
	return err
}

// RetrieveInvoice converts echo context to params.
func (w *ServerInterfaceWrapper) RetrieveInvoice(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id Id

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RetrieveInvoice(ctx, id)
	return err
}

// RetrieveOrders converts echo context to params.
func (w *ServerInterfaceWrapper) RetrieveOrders(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RetrieveOrders(ctx)
	return err
}

// CreateOrder converts echo context to params.
func (w *ServerInterfaceWrapper) CreateOrder(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateOrder(ctx)
	return err
}

// RetrieveOrder converts echo context to params.
func (w *ServerInterfaceWrapper) RetrieveOrder(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id Id

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RetrieveOrder(ctx, id)
	return err
}

// RetrieveProducts converts echo context to params.
func (w *ServerInterfaceWrapper) RetrieveProducts(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RetrieveProducts(ctx)
	return err
}

// RetrieveProductsByProductGroup converts echo context to params.
func (w *ServerInterfaceWrapper) RetrieveProductsByProductGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "group" -------------
	var group Group

	err = runtime.BindStyledParameter("simple", false, "group", ctx.Param("group"), &group)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter group: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RetrieveProductsByProductGroup(ctx, group)
	return err
}

// RetrieveProduct converts echo context to params.
func (w *ServerInterfaceWrapper) RetrieveProduct(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id Id

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RetrieveProduct(ctx, id)
	return err
}

// CustomerLogin converts echo context to params.
func (w *ServerInterfaceWrapper) CustomerLogin(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CustomerLogin(ctx)
	return err
}

// CustomerRegistration converts echo context to params.
func (w *ServerInterfaceWrapper) CustomerRegistration(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CustomerRegistration(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.PATCH("/customer/modify/:id", wrapper.ModifyCustomer)
	router.GET("/customer/validate/email/:email", wrapper.ValidateEmail)
	router.GET("/customer/validate/phone-number/:phone", wrapper.ValidatePhoneNumber)
	router.GET("/invoice", wrapper.RetrieveInvoices)
	router.POST("/invoice", wrapper.CreateInvoice)
	router.GET("/invoice/:id", wrapper.RetrieveInvoice)
	router.GET("/order", wrapper.RetrieveOrders)
	router.POST("/order", wrapper.CreateOrder)
	router.GET("/order/:id", wrapper.RetrieveOrder)
	router.GET("/product", wrapper.RetrieveProducts)
	router.GET("/product/filter/product-group/:group", wrapper.RetrieveProductsByProductGroup)
	router.GET("/product/:id", wrapper.RetrieveProduct)
	router.POST("/sign-in", wrapper.CustomerLogin)
	router.POST("/sign-up", wrapper.CustomerRegistration)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"qTWO6PZx+78AAAD//wRUnds2MQAA",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
