// Package api provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Modify customer.
	// (PATCH /customer/modify/{id})
	ModifyCustomer(ctx echo.Context, id Id) error
	// Check if email exists in database.
	// (GET /customer/validate/email/{email})
	ValidateEmail(ctx echo.Context, email Email) error
	// Check if phone number exists in database.
	// (GET /customer/validate/phone-number/{phone})
	ValidatePhoneNumber(ctx echo.Context, phone Phone) error
	// Retrieve invoices.
	// (GET /invoice)
	RetrieveInvoices(ctx echo.Context) error
	// Retrieve invoice.
	// (GET /invoice/{id})
	RetrieveInvoice(ctx echo.Context, id Id) error
	// Retrieve orders.
	// (GET /order)
	RetrieveOrders(ctx echo.Context) error
	// Create order.
	// (POST /order)
	CreateOrder(ctx echo.Context) error
	// Retrieve order.
	// (GET /order/{id})
	RetrieveOrder(ctx echo.Context, id Id) error
	// Retrieve all available products.
	// (GET /product)
	RetrieveProducts(ctx echo.Context) error
	// Retrieve product details for specified product group.
	// (GET /product/filter/product-group/{group})
	RetrieveProductsByProductGroup(ctx echo.Context, group Group) error
	// Retrieve product details.
	// (GET /product/{id})
	RetrieveProduct(ctx echo.Context, id Id) error
	// Login customer.
	// (POST /sign-in)
	CustomerLogin(ctx echo.Context) error
	// Customer registration.
	// (POST /sign-up)
	CustomerRegistration(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ModifyCustomer converts echo context to params.
func (w *ServerInterfaceWrapper) ModifyCustomer(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id Id

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ModifyCustomer(ctx, id)
	return err
}

// ValidateEmail converts echo context to params.
func (w *ServerInterfaceWrapper) ValidateEmail(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "email" -------------
	var email Email

	err = runtime.BindStyledParameter("simple", false, "email", ctx.Param("email"), &email)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter email: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ValidateEmail(ctx, email)
	return err
}

// ValidatePhoneNumber converts echo context to params.
func (w *ServerInterfaceWrapper) ValidatePhoneNumber(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "phone" -------------
	var phone Phone

	err = runtime.BindStyledParameter("simple", false, "phone", ctx.Param("phone"), &phone)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter phone: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ValidatePhoneNumber(ctx, phone)
	return err
}

// RetrieveInvoices converts echo context to params.
func (w *ServerInterfaceWrapper) RetrieveInvoices(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RetrieveInvoices(ctx)
	return err
}

// RetrieveInvoice converts echo context to params.
func (w *ServerInterfaceWrapper) RetrieveInvoice(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id Id

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RetrieveInvoice(ctx, id)
	return err
}

// RetrieveOrders converts echo context to params.
func (w *ServerInterfaceWrapper) RetrieveOrders(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RetrieveOrders(ctx)
	return err
}

// CreateOrder converts echo context to params.
func (w *ServerInterfaceWrapper) CreateOrder(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateOrder(ctx)
	return err
}

// RetrieveOrder converts echo context to params.
func (w *ServerInterfaceWrapper) RetrieveOrder(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id Id

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RetrieveOrder(ctx, id)
	return err
}

// RetrieveProducts converts echo context to params.
func (w *ServerInterfaceWrapper) RetrieveProducts(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RetrieveProducts(ctx)
	return err
}

// RetrieveProductsByProductGroup converts echo context to params.
func (w *ServerInterfaceWrapper) RetrieveProductsByProductGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "group" -------------
	var group Group

	err = runtime.BindStyledParameter("simple", false, "group", ctx.Param("group"), &group)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter group: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RetrieveProductsByProductGroup(ctx, group)
	return err
}

// RetrieveProduct converts echo context to params.
func (w *ServerInterfaceWrapper) RetrieveProduct(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id Id

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RetrieveProduct(ctx, id)
	return err
}

// CustomerLogin converts echo context to params.
func (w *ServerInterfaceWrapper) CustomerLogin(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CustomerLogin(ctx)
	return err
}

// CustomerRegistration converts echo context to params.
func (w *ServerInterfaceWrapper) CustomerRegistration(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CustomerRegistration(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.PATCH("/customer/modify/:id", wrapper.ModifyCustomer)
	router.GET("/customer/validate/email/:email", wrapper.ValidateEmail)
	router.GET("/customer/validate/phone-number/:phone", wrapper.ValidatePhoneNumber)
	router.GET("/invoice", wrapper.RetrieveInvoices)
	router.GET("/invoice/:id", wrapper.RetrieveInvoice)
	router.GET("/order", wrapper.RetrieveOrders)
	router.POST("/order", wrapper.CreateOrder)
	router.GET("/order/:id", wrapper.RetrieveOrder)
	router.GET("/product", wrapper.RetrieveProducts)
	router.GET("/product/filter/product-group/:group", wrapper.RetrieveProductsByProductGroup)
	router.GET("/product/:id", wrapper.RetrieveProduct)
	router.POST("/sign-in", wrapper.CustomerLogin)
	router.POST("/sign-up", wrapper.CustomerRegistration)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xazXLjuBF+FRSSQ1LFEeXM5BCdMp54U679m7LHuWxNqWCgKWIFAlwA1ETj0jkvlgdL",
	"AeCvSEmkInsPnpNEEOhu9Pc10GjwCVOV5UqCtAYvnnBONMnAgvZPkBEu3B8GhmqeW64kXuAb14yIQTmx",
	"6QxHmLtW94AjLEkGeFEOjbCG3wqugeGF1QVE2NAUMuJkJkpnxLa62m3uRhqruVzh3S7CK62KvK//o1as",
	"oBb51yfsCCKO2dFXy1lf5x1QpRniDP3p4eH2H38+oZazcXMvCt+zb0OeKgkDU3fNSBbZI+gTJgQJU2a+",
	"C53B2GvFOHgKfCiMVRnoH9SKy7vw1rVTJS1I/5fkueCUOAvjX40z86ml5I8aErzAf4gbosXhrYm90EZx",
	"Y+UuqhVfWmcl94DanzW7vE4vdFChbzG5kia4+5qwSyu/0VqVyrtcuiYMlXhj53AlE8HpCyj+lAIyOVCe",
	"cHAmGFVoCogIDYRtEfybG2twhwPBRc9Egq51P3/vVN9KC1oScQ96AzpM5dkdUylFxmtFEDo6azaKU7i4",
	"H0q5x9zgO5jn0mwOq/5J2e9UIdnvxscvxCCpLEq8Fc3acGFPtBaHITf41+Z5tB7xfrnHXlxvKfekYvNc",
	"mo/M+UGSwqYgrVMAL0C8fYW1DUrzry9nQKltF+F/EcGZ13Bx9zeiDwGwq3KTTuLhs1KtctC2TEnqrHQv",
	"f4lwwrWxy5D/DLwW5NjbnBjzRWnWyc/qxmhggEuwliEXG04km83+l7ZtbUuiOv3tiGuZ87lWrR5/Ber3",
	"6no/6nqGKjY8twyMISs4baWX0PQf0l3tGT3tJFNFYEntvkQoYhvflZPbRVi55WfJ2Yhk2Llim4G0S2OJ",
	"LczJOA+970Pn1vAgd9TgT67rvm9qm6Nqqnuye5YecZ+fBreQmdF7dC2MaE227jnkzxMCZCLH9xxQM/UY",
	"NX8EYgrtvPAguWcDyCJzw3MO1DlppUmGI7zmQjmqcSG44NaTPvx+HuBA2CX7jC9XibFUKjGs/D4KAK/6",
	"1kLmI4nL2zDoqo9HkD6Opl5qQ1KT8jzncjWKpfdl50Gatl3SnfCegftKh9Bs5t5zfR7207Ge/60g0nK7",
	"HbM+7M2opakl56C597X/K+aRPNdqA8xzl64hHM4J2y6tWjon+BO0DzPvM7lMlXD/KJEUhAB2mJMTeTQU",
	"xt0Vqx0xIJnTFfkqjQALjVHlJJJCsgPmtdeyllBKTIrd/vvI7ZISH/dUA2uectBGSSKWNHXHQ4ePJtIk",
	"B0KzSul6DOls8U9YFkKQRwFVIaIniGdkBUtfxegwSrtF5/RouTRW0fW4DSirl6llUa5Tx7DbW9V2VZVl",
	"aI3V5e542oiK2HWda0T++k/fdz9EylyiK7A/y8q6lreGwqijqkUdprlcmyDXCUt04YVmXKz9wq4oaAd+",
	"hB/JGvTWM1etQ1Oi1VeQrimFjBvrX6fbFQdfp1J6RSSnxyg2PtbqY0Y/2jqLZ3tyIPgm2Jxzui7yQUta",
	"aWyP79wsN+51ixaPSgkgsodX3bXvfl+BlImqMm8SQqvc1DERsDZEMqJnmqw5/fuWpErNqMqa0t/7ug+6",
	"I2v+3/94P3Drogd/vPn+/fXNp/foO6UYuk9Vjt5/vMUR3oA2IRu/ms1nc7+h5SBJzvECv/VNka8x+snG",
	"1T4TZ4rxZBs/cbYLJWRL037l8sEAQ1ah0BtVo1GuVcIFzLDXpr1rbxle4B99x/oYEHVq078Mw990iTnD",
	"u8/tgub2EGc6Nc94v+64X6H7y3x+WFDZL+4VrnYRfje/Oj1w4ET4bv527LjmIPdu/u70oLrCsovwX8dM",
	"a6go5o9tRZYRva1Bq9Gd+dcNVTYheiD2bI6f/I9nzQrsYc7QFOga8QT5/mWBEHGJGLHkkZgB9pRxCjd1",
	"zjqFPCHYAn+mYj9whn4t6H84jdMBPvjD75uwM8ZP/mkCLfL2rcgUdvjrlJ+aI/cUjoT7lW8cOZcjJ0Hz",
	"VOFNteEoFzRYzWEDqBxgUKI0oqAt4bLZbTjrk+GuHFqfzM9BtFcofy143u07vgtcnRZMQg+djd75ecKZ",
	"iL96wEu8VVWgGQc0EQL5IcOBehjn8tB9DmJ7VymvDrDg75k/eSpzbGPVQCwgCV/CmD4aH3yPUNE4I8nu",
	"3LL3M+yrvmlBYenHEW5pXaS/PM5/G3FCqG7bL7izBtRKxJqgnLgE+zGdoAwtxxbfiggvtPR2L2JfZxyX",
	"COdN8W38wks2hPtiGiqHm8PQ1qWXc4DqXea+OqwOubsNXpxwYUFXj2989S5+8j8TArccjhhYwkXYV5vP",
	"GvL2R3On4b7edoqAU0M7FCDPi+5vpJmEZIdJ05b6cXqOLfxVnfXFlv7971JeOzdK/A1fyTflXfDR1E6o",
	"1dE0u/O9J/4/6qedD0a/FVGnYP3DHkYNwuE65jjCGlbcWNA+fT8N9J3vHl7gZ6mXf8vmz8rmq6KHbgE0",
	"C9dD4fPQsNAWWuAFTq3NF3EsFCUiVcYu3s7n85jkPL7y1zZd9wetqNU4w7vPu/8FAAD//9xVNJoNMAAA",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
