// Package api provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Login customer.
	// (POST /customer/login)
	CustomerLogin(ctx echo.Context) error
	// Customer registration.
	// (POST /customer/registration)
	CustomerRegistration(ctx echo.Context) error
	// Modify customer.
	// (PATCH /customer/{id})
	ModifyCustomer(ctx echo.Context, id Id) error
	// Retrieve invoices.
	// (GET /invoice)
	RetrieveInvoices(ctx echo.Context) error
	// Retrieve invoice.
	// (GET /invoice/{id})
	RetrieveInvoice(ctx echo.Context, id Id) error
	// Retrieve orders.
	// (GET /order)
	RetrieveOrders(ctx echo.Context) error
	// Create order.
	// (POST /order)
	CreateOrder(ctx echo.Context) error
	// Retrieve order.
	// (GET /order/{id})
	RetrieveOrder(ctx echo.Context, id Id) error
	// Retrieve all available products.
	// (GET /product)
	RetrieveProducts(ctx echo.Context) error
	// Retrieve product details.
	// (GET /product/{id})
	RetrieveProduct(ctx echo.Context, id Id) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// CustomerLogin converts echo context to params.
func (w *ServerInterfaceWrapper) CustomerLogin(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CustomerLogin(ctx)
	return err
}

// CustomerRegistration converts echo context to params.
func (w *ServerInterfaceWrapper) CustomerRegistration(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CustomerRegistration(ctx)
	return err
}

// ModifyCustomer converts echo context to params.
func (w *ServerInterfaceWrapper) ModifyCustomer(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id Id

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ModifyCustomer(ctx, id)
	return err
}

// RetrieveInvoices converts echo context to params.
func (w *ServerInterfaceWrapper) RetrieveInvoices(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RetrieveInvoices(ctx)
	return err
}

// RetrieveInvoice converts echo context to params.
func (w *ServerInterfaceWrapper) RetrieveInvoice(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id Id

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RetrieveInvoice(ctx, id)
	return err
}

// RetrieveOrders converts echo context to params.
func (w *ServerInterfaceWrapper) RetrieveOrders(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RetrieveOrders(ctx)
	return err
}

// CreateOrder converts echo context to params.
func (w *ServerInterfaceWrapper) CreateOrder(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateOrder(ctx)
	return err
}

// RetrieveOrder converts echo context to params.
func (w *ServerInterfaceWrapper) RetrieveOrder(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id Id

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RetrieveOrder(ctx, id)
	return err
}

// RetrieveProducts converts echo context to params.
func (w *ServerInterfaceWrapper) RetrieveProducts(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RetrieveProducts(ctx)
	return err
}

// RetrieveProduct converts echo context to params.
func (w *ServerInterfaceWrapper) RetrieveProduct(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id Id

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RetrieveProduct(ctx, id)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST("/customer/login", wrapper.CustomerLogin)
	router.POST("/customer/registration", wrapper.CustomerRegistration)
	router.PATCH("/customer/:id", wrapper.ModifyCustomer)
	router.GET("/invoice", wrapper.RetrieveInvoices)
	router.GET("/invoice/:id", wrapper.RetrieveInvoice)
	router.GET("/order", wrapper.RetrieveOrders)
	router.POST("/order", wrapper.CreateOrder)
	router.GET("/order/:id", wrapper.RetrieveOrder)
	router.GET("/product", wrapper.RetrieveProducts)
	router.GET("/product/:id", wrapper.RetrieveProduct)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xaS3PbOBL+KyzsHnarWJK8yR5Wp91kH+XaySRlx6eUS9UGmiIiEGAA0I7i0n+fAsD3",
	"Q6Y9sufgXGYsEv1Af183Gs3cE6qyXEmU1pD1PclBQ4YWtf/FmfsvQ0M1zy1XkqzJBVKlWcRZ9Jerq/N/",
	"/zUCE+Vg0wWJCXcL3A8SEwkZkrVTERON3wqukZG11QXGxNAUM3C6E6UzsGRNisKvtPvcSRmrudySw+EQ",
	"hNHYd4px9F69L4xVGepf1JbLi/DWPadKWpT+T8hzwSk4l5dfjfP7vmX0zxoTsiZ/WjZ7X4a3ZumVNoYb",
	"rw9xbfjUNiu9E2Y/anZ6m17pqEH/xORKmhDud8BObfw/WqvSeJdc74BFJd7EBVzJRHD6AoY/pxiZHClP",
	"ODoXjCo0xQiERmD7CL9zYw3pcCCE6JlI0PXu4/+d6XNpUUsQl6hvUYetPHtgKqOR8VYjDAudN7eKUzx5",
	"HEq9x8LgF5jnsmymTf+q7H9VIdkfxsc7MJFUNkq8F01tOHEkWsVhLAz+tXkeq0ei/0krVlB7crul3gcN",
	"m+eyfGTPVxIKm6K0zgC+APH6BmsflOY/Xs6B0pp7XUq0T37fqWiVo7ZlT4AZcOH+6DUQMUm4NnYTupGR",
	"1wKOvc3BmDulWadVqR/GIwKpkriRRXYTvOz3M+3T9kvbt7YncbmdnrqWO9e1aXXzFak/LOsDoRsZqtj4",
	"3jI0Brb4sJdeQ7N+zHZVtAfWIVNFoEodvkQosE3sys0dYqJc/m84m9EXulDsM5R2YyzYwjyYaGH1ZVjc",
	"Eg96Zwl/dkv7sal9jqut9nQPPD0SvtBzW8zM7EOyVgZaw979Dg3sIxLkkRzvBaBm6jFqfkAwhXZRuJLc",
	"swFlkTnxnCN1QdpqyEhMdlwoRzUuBBfcetKH/1+PcCAcU0PGl1ViLpVKDKu4zwLAmz63mPlM4vI8CJ0N",
	"8Qja59HUa21IalKe51xuZ7H0slw8StN2SLob7jnYNzqGZrP3QejzcKDNjfy3AqTldj+nPvR21LLU0jPp",
	"7mUd/4p5kOda3SLz3KU7DPdUYPuNVRsXBH+f9WnmYyY3qRLuLwqSohDIpjn5SB6NpXG3YrUzBiVztmJ/",
	"cxdosXGq3ERSSDbhXruWtZRSMO7OzvCG2w0Fn/dUI2t+5aiNkiA2NHX3M4ePBmmSidSseqoBQzqH/T2R",
	"hRBwI7CaDAwU8Qy2uPEzhQ6jtCs6D0vLjbGK7uYdQFldpjZFWaeOYderaodq5jFWY3V5Oj7sREXsrVZF",
	"PrOB/J9f20+RspfoKhzusvKuFa2xNOqYalGHaS53Juh1yhJdeKUZFztf2BVF7cCPyQ3sUO89c9UuPEq0",
	"+oHSPUox48b61+l+y1Gir01bkJweo9j8XKv7/GG2dYpne3Mo+G3wOed0V+Qjnhw8zxJVtcYQaF8euAQE",
	"7gxIBnqhYcfpP/eQKrWgKmuGZJ9wBzdoIbpMVR7969M5iT3D1yS1Nl8vl3d3dwv8Di7fvaTbArdiSvYW",
	"tQnd9NlitVj5YyhHCTkna/LGP4r9nM7HbFmdDktR9w4qTHt6rblBFlkV+WVRJbUgXrv2t4BzRtbdAR1p",
	"T/D2Uxh1hnzL0Qlffy71t9VqWlu5bjkY1xxi8nZ19rDgyD3o7erNXLnq+uKE3j4sVM8VDjH5+5xtjY2C",
	"/F2pyDLQe7IObWALI/e2AVrj1iUbVGX4ON5hNepI4t0M2C/ayn8H+tPAnw19fa+xwWlGBFtTzZenxD9m",
	"ELcafZ6OElVcozb6fWbcc3YIHwIsTacpkSnGk31NhijXKuECh6T44BfWF/e484Xhy/immiVLzsjh+lk4",
	"9LN4TDPlQxfdkiO8ueRv8Wi5sJrjLUalgIkSpSOK2kKrJEWcDdlyUYrWF+KnwDYYEL8W2C76ge8CV+f2",
	"o9CLnoze05P9iYi/esBLvFU1F5kHNAgReZHxRJ3GubzrPgWx3ieEVwdYiPfCX/iO9l7U9zW+8/IyI22X",
	"XxEGCU84KTtfl3+2WidqtQJqJWJNUj6yBHuZTlKGJ8eKb0WEFyq93Q+QrzOPS4TzZuY1v/DCLXA/w4pK",
	"cTMNbT3xeApQg4+Yrw6rqXC3wXtkgpZSEUMLXITzs/lsX709lq7VUOrFErb/Ff3V0aCH2SJM8MI/bwmh",
	"74zehKIgUmXs+s1qtVpCzpdnfn7WpUYwHLUeLsjh+vBbAAAA///mZxSrYCcAAA==",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}

