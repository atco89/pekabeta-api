// Package api provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Login customer.
	// (POST /customer/login)
	CustomerLogin(ctx echo.Context) error
	// Customer registration.
	// (POST /customer/registration)
	CustomerRegistration(ctx echo.Context) error
	// Modify customer.
	// (PATCH /customer/{id})
	ModifyCustomer(ctx echo.Context, id Id) error
	// Retrieve invoices.
	// (GET /invoice)
	RetrieveInvoices(ctx echo.Context) error
	// Retrieve invoice.
	// (GET /invoice/{id})
	RetrieveInvoice(ctx echo.Context, id Id) error
	// Retrieve orders.
	// (GET /order)
	RetrieveOrders(ctx echo.Context) error
	// Create order.
	// (POST /order)
	CreateOrder(ctx echo.Context) error
	// Retrieve order.
	// (GET /order/{id})
	RetrieveOrder(ctx echo.Context, id Id) error
	// Retrieve all available products.
	// (GET /product)
	RetrieveProducts(ctx echo.Context) error
	// Retrieve product details.
	// (GET /product/{id})
	RetrieveProduct(ctx echo.Context, id Id) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// CustomerLogin converts echo context to params.
func (w *ServerInterfaceWrapper) CustomerLogin(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CustomerLogin(ctx)
	return err
}

// CustomerRegistration converts echo context to params.
func (w *ServerInterfaceWrapper) CustomerRegistration(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CustomerRegistration(ctx)
	return err
}

// ModifyCustomer converts echo context to params.
func (w *ServerInterfaceWrapper) ModifyCustomer(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id Id

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ModifyCustomer(ctx, id)
	return err
}

// RetrieveInvoices converts echo context to params.
func (w *ServerInterfaceWrapper) RetrieveInvoices(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RetrieveInvoices(ctx)
	return err
}

// RetrieveInvoice converts echo context to params.
func (w *ServerInterfaceWrapper) RetrieveInvoice(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id Id

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RetrieveInvoice(ctx, id)
	return err
}

// RetrieveOrders converts echo context to params.
func (w *ServerInterfaceWrapper) RetrieveOrders(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RetrieveOrders(ctx)
	return err
}

// CreateOrder converts echo context to params.
func (w *ServerInterfaceWrapper) CreateOrder(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateOrder(ctx)
	return err
}

// RetrieveOrder converts echo context to params.
func (w *ServerInterfaceWrapper) RetrieveOrder(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id Id

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RetrieveOrder(ctx, id)
	return err
}

// RetrieveProducts converts echo context to params.
func (w *ServerInterfaceWrapper) RetrieveProducts(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RetrieveProducts(ctx)
	return err
}

// RetrieveProduct converts echo context to params.
func (w *ServerInterfaceWrapper) RetrieveProduct(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id Id

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RetrieveProduct(ctx, id)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST("/customer/login", wrapper.CustomerLogin)
	router.POST("/customer/registration", wrapper.CustomerRegistration)
	router.PATCH("/customer/:id", wrapper.ModifyCustomer)
	router.GET("/invoice", wrapper.RetrieveInvoices)
	router.GET("/invoice/:id", wrapper.RetrieveInvoice)
	router.GET("/order", wrapper.RetrieveOrders)
	router.POST("/order", wrapper.CreateOrder)
	router.GET("/order/:id", wrapper.RetrieveOrder)
	router.GET("/product", wrapper.RetrieveProducts)
	router.GET("/product/:id", wrapper.RetrieveProduct)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
